" Enable syntax highlighting
syntax enable
set background=dark " Use "light" for light theme
colorscheme solarized

" Fix for GitGutter
" Might be fixed with https://github.com/airblade/vim-gitgutter/pull/729
highlight! link SignColumn LineNr

" Tab bar
set showtabline=2

" Status bar
set laststatus=2 statusline=\ Line\ %l,\ Column\ %c,\ Unicode\ %B%=%{toupper(&fileencoding)}%{repeat(\"\ \",5)}%{toupper(&fileformat)}%{repeat(\"\ \",5)}%{&shiftwidth}%{repeat(\"\ \",4)}\ %Y%{repeat(\"\ \",5)}

" Enable mouse support for terminals
set mouse=a

" Show line numbers
set number

" Highlight current line
set cursorline

" Don't wrap lines
set nowrap

" Show whitespaces and tabs
set listchars=tab:\ \ ,space:·

" Insert 4 whitespace characters when the tab key is pressed
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab

" Copy the indentation from the previous line, when starting a new line
set autoindent

" Fold code based on indentation
set foldmethod=indent foldminlines=0 foldlevelstart=20

" Find search term while typing
set incsearch

" Show the current command in the bottom right corner
set showcmd

" Configure what should be saved via 'mksession'
set sessionoptions=blank,curdir,folds,slash,tabpages,unix

" Open new split windows right next to/below the current one
set splitbelow
set splitright

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Display all matching files ob tab complete
set wildmenu

" Always show the sign column (used for GitGutter signs)
set signcolumn=yes

" Highlight search results
set hlsearch

"
" netrw settngs
"

" List files with builtin filebrowser as tree on the left side and without banner
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 20
let g:netrw_dirhistmax = 0

"
" GitGutter settngs
"

" GitGutter shouldn't add any keybindings
let g:gitgutter_map_keys = 0

" Always use • as GitGutter symbol - it looks much cleaner ;)
let g:gitgutter_sign_added = "•"
let g:gitgutter_sign_modified = "•"
let g:gitgutter_sign_removed = "•"
let g:gitgutter_sign_removed_first_line = "•"
let g:gitgutter_sign_modified_removed = "•"

" Update GitGutter only when file is saved
autocmd BufWritePost * GitGutter

"
" fzf settngs
"

" fzf popup window layout
let g:fzf_layout = { 'window': { 'width': 0.4, 'height': 0.3 } }

" Disable preview window altogether
let g:fzf_preview_window = []

" Let fzf colors match our colorscheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'CursorLine'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['bg', 'CursorLine'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

"
" vdebug settngs
"

if !exists('g:vdebug_options')
	let g:vdebug_options = {}
endif

let g:vdebug_options.path_maps = {
\    '/srv/http': '/home/jonas/workspace'
\}

" Shortcuts for vdebug
if !exists('g:vdebug_keymap')
	let g:vdebug_keymap = {}
endif

let g:vdebug_keymap['run'] = '<C-F5>'
let g:vdebug_keymap['run_to_cursor'] = '<C-F9>'
let g:vdebug_keymap['step_over'] = '<C-F2>'
let g:vdebug_keymap['step_into'] = '<C-F3>'
let g:vdebug_keymap['step_out'] = '<C-F4>'
let g:vdebug_keymap['close'] = '<C-F6>'
let g:vdebug_keymap['detach'] = '<C-F7>'
let g:vdebug_keymap['set_breakpoint'] = '<C-F10>'
let g:vdebug_keymap['get_context'] = '<C-F11>'
let g:vdebug_keymap['eval_under_cursor'] = '<C-F12>'

"
" Custom keyboard shortcuts
"

let mapleader = "\<Space>"

" Open new tab with <Leader> + t
noremap <Leader>t :tabnew<Enter>

" Close tab with <Leader> + w
noremap <Leader>w :tabclose<Enter>

" Open files with <Leader> + p
noremap <Leader>p :Files<Enter>

" Go to method/variable/etc. definition with <Leader> + r
noremap <Leader>r :BTags<Enter>

" Copy selection to system clipboard with <Leader> + y
noremap <Leader>y "+y

" Reload current file with <F5>
noremap <F5> :e<Enter>

" Toggle show whitespaces and tabs
noremap <F3> :set list! list?<Enter>

" Toggle show tagbar
nmap <F8> :TagbarToggle<CR>

" Trigger code completion on <TAB>
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
              \ pumvisible() ? "\<C-n>" :
              \ <SID>check_back_space() ? "\<TAB>" :
              \ coc#refresh()

" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall

" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
