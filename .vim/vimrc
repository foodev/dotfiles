" Tab bar
set showtabline=2

" Status bar
set laststatus=2 statusline=\ Line\ %l,\ Column\ %c,\ Unicode\ %B%=%{toupper(&fileencoding)}%{repeat(\"\ \",5)}%{toupper(&fileformat)}%{repeat(\"\ \",5)}%{&shiftwidth}%{repeat(\"\ \",4)}\ %Y%{repeat(\"\ \",5)}

" Enable mouse support for terminals
set mouse=a

" Show line numbers
set number

" Enable syntax highlighting
syntax enable
set background=dark " Use "light" for light theme
colorscheme solarized

" Highlight current line
set cursorline

" Don't wrap lines
set nowrap

" Show vertical line at column 80
set colorcolumn=80

" Show whitespaces and tabs
set listchars=tab:\ \ ,space:Â·

" Insert 4 whitespace characters when the tab key is pressed
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab

" Copy the indentation from the previous line, when starting a new line
set autoindent

" Fold code based on indentation
set foldmethod=indent foldminlines=0 foldlevelstart=20

" Find search term while typing
set incsearch

" Show the current command in the bottom right corner
set showcmd

" Configure what should be saved via 'mksession'
set sessionoptions=blank,curdir,folds,slash,tabpages,unix

" Open new split windows right next to/below the current one
set splitbelow
set splitright

" List files with builtin filebrowser as tree on the left side and without banner
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 20
let g:netrw_dirhistmax = 0

" Display CtrlP dropdown at the top of the window
let g:ctrlp_match_window = 'top,order:ttb,result:0'

" Show only methods/functions with CtrlPBufTag
let g:ctrlp_buftag_types = {'php': '--php-kinds=f'}

" Open new tab with <Ctrl> + t
noremap <C-t> :tabnew<Enter>

" Close tab with <Ctrl> + w
noremap <C-w> :tabclose<Enter>

" Got to function/method definition in file with <Ctrl> + r
noremap <C-r> :CtrlPBufTag<Enter>

" Reload current file with <F5>
noremap <F5> :e<Enter>

" Copy selection to system clipboard with <C-y>
noremap <C-y> "+y

" Toggle show whitespaces and tabs
noremap <F3> :set list! list?<Enter>

" Trigger code completion on <TAB>
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
              \ pumvisible() ? "\<C-n>" :
              \ <SID>check_back_space() ? "\<TAB>" :
              \ coc#refresh()

" Custom settings for vdebug
if !exists('g:vdebug_options')
	let g:vdebug_options = {}
endif

let g:vdebug_options.path_maps = {
\    '/srv/http': '/home/jonas/workspace'
\}

" Shortcuts for vdebug
if !exists('g:vdebug_keymap')
	let g:vdebug_keymap = {}
endif

let g:vdebug_keymap['run'] = '<C-F5>'
let g:vdebug_keymap['run_to_cursor'] = '<C-F9>'
let g:vdebug_keymap['step_over'] = '<C-F2>'
let g:vdebug_keymap['step_into'] = '<C-F3>'
let g:vdebug_keymap['step_out'] = '<C-F4>'
let g:vdebug_keymap['close'] = '<C-F6>'
let g:vdebug_keymap['detach'] = '<C-F7>'
let g:vdebug_keymap['set_breakpoint'] = '<C-F10>'
let g:vdebug_keymap['get_context'] = '<C-F11>'
let g:vdebug_keymap['eval_under_cursor'] = '<C-F12>'
